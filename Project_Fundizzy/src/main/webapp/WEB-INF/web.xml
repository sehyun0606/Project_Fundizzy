<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://Java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- 
	스프링에 필요한 기본 설정이 기술된 root-context.xml 과 servlet-context.xml 등의 설정 파일을 
	다른 위치로 이동했을 경우 web.xml 파일에 해당 위치가 기술되어야 한다.
	1) root-context.xml : 웹과 관련없는 스프링 빈들을 관리하는 ApplicatonContext 객체 설정
	   => 기본 위치 : /WEB-INF/spring/root-context.xml
	   => 변경할 위치 : src/main/resources/config/root-context.xml
	    
	2) servlet-context.xml : 웹과 관련된 작업을 처리하는 스프링 빈들을 관리하는 DispatcherServlet 객체 설정
	   => 기본 위치 : /WEB-INF/spring/appServlet/servlet-context.xml
	   => 변경할 위치 : src/main/resources/config/servlet-context.xml 
	   
	이 때, src/main/resources 경로는 classpath:/ 로 대체할 수 있다!
	-->

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
<!-- 		<param-value>/WEB-INF/spring/root-context.xml</param-value> -->
		<!-- src/main/resources/config/root-context.xml 파일 위치로 변경 -->
		<param-value>
			classpath:/config/root-context.xml
<!-- 			classpath:/config/db-context.xml -->
		</param-value>
	</context-param>
	
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
<!-- 			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value> -->
			<!-- src/main/resources/config/servlet-context.xml 파일 위치로 변경 -->
			<param-value>
				classpath:/config/servlet-context.xml
				classpath:/config/websocket-context.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

		
	<!-- ====================================================================================== -->
	<!-- 톰캣 9.x 이하 사용 시 POST 방식 파라미터에 대한 한글 등의 인코딩 처리를 위한 필터 설정 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- ======================================================================= -->
	<!-- 
	[ 예외 처리 페이지 설정 ]
	1. web.xml 파일에서 HTTP 에러 코드에 대한 뷰페이지를 지정하는 방법
	2. 예외 처리를 수행할 별도의 핸들러 클래스를 정의하여 에러 코드에 대한 처리를 수행하는 방법
	
	web.xml 파일에서는 <error-page> 태그 사이에
	<error-code> 태그를 지정하여 HTTP 상태코드(ex. 404, 500) 를 기술하고
	<location> 태그 사이에 해당 에러 발생 시 포워딩 할 페이지 지정	
	-->
<!-- 	<error-page> -->
<!-- 		<error-code>404</error-code> -->
<!-- 		<location>/WEB-INF/views/result/error_404.jsp</location> -->
<!-- 	</error-page> -->
	
<!-- 	<error-page> -->
<!-- 		<error-code>500</error-code> -->
<!-- 		<location>/WEB-INF/views/result/error_500.jsp</location> -->
<!-- 	</error-page> -->
	
	<!-- <error-code> 태그 대신 <exception-type> 태그로 예외 클래스 지정도 가능 -->
	<!-- 해당 예외 발생하면 지정된 페이지로 포워딩 -->
	<!-- 단, 4xx 에러의 경우 시스템 처리 과정에서의 오류(예외)가 아니므로 통합 불가 -->
<!-- 	<error-page> -->
<!-- 		<exception-type>java.lang.Exception</exception-type> -->
<!-- 		<location>/WEB-INF/views/result/error_exception.jsp</location> -->
<!-- 	</error-page> -->
	
</web-app>



