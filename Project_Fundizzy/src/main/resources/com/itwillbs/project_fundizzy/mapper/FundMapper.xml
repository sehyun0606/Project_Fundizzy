<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.itwillbs.project_fundizzy.mapper.FundMapper">
  
<!--   펀딩 리스트 출력 -->
	<select id="selectFundList" resultType="map">
	SELECT * FROM project_story ps 
	JOIN project_list pl 
	ON ps.project_code = pl.project_code 
	JOIN project_date pd 
	ON ps.project_code = pd.project_code 
	JOIN project_info pi 
	ON ps.project_code = pi.project_code 
	WHERE approved_date IS NOT NULL 
	AND date_config = "Y" 
	AND NOW() BETWEEN project_start_date AND project_end_date
<if test="cat != null and cat != ''"> AND (category = #{cat} OR sub_category = #{cat}) </if>
</select>
	
<!--   프로젝트 보드 출력 -->
	<select id="selectFundBoard" resultType="map">
		SELECT pi.project_code,
		pi.representative_email,
		pi.category,
		pi.sub_category,
		pi.adult_check,
		pi.target_amount,
		ps.project_title,
		ps.project_content,
		pd.project_start_date,
		pd.project_end_date,
		pi.business_name,
		pl.progress
		FROM project_info pi 
		JOIN project_date pd ON pi.project_code = pd.project_code
		JOIN project_story ps ON pd.project_code = ps.project_code
		JOIN project_list pl ON pl.project_code = ps.project_code
		WHERE ps.project_code = #{ps.project_code};
	</select>
<!-- 	대표사진 및 상세사진 출력 -->
	<select id="selectProjectStory" resultType="ProjectStory">
		SELECT *
		FROM project_story
		WHERE project_code = #{project_code}
	</select>
<!-- 	프로젝트 board 출력 - 리워드 테이블 가져오기  -->
	<select id="selectReward" resultType="map">
		SELECT *
		FROM reward r
		JOIN project_info pi ON pi.project_code = r.project_code
		WHERE r.project_code = #{r.project_code}
	</select>
	
<!-- 	프로젝트 board 출력 - 찜 테이블 가져오기  -->
	<select id="selectKeep" resultType="map">
		SELECT *
		FROM keep 
		WHERE project_code = #{project_code}
		AND email = #{email}
	</select>
	
<!-- 	구매자 수 출력  -->
	<select id="selectFundHistoryCount" resultType="int">
		SELECT COUNT(*)
		FROM fund_history
		WHERE project_code = #{project_code} 
	</select>
	
<!-- 	찜 등록 -->
	<insert id="insertKeep">
		INSERT INTO keep
		VALUES(
			#{project_code}
			 ,#{email}
		)
	</insert>
	
<!-- 	찜 삭제 -->
	<delete id="deleteKeep">
		DELETE FROM keep
		WHERE email = #{email}
		AND project_code = #{project_code}
	</delete>
	
<!-- 	새소식 목록 출력 -->
 	<select id="selectNews" resultType="map">
		SELECT *
		FROM news
		WHERE project_code = #{project_code}
	</select>
	
<!--   	지지서명 조회 후 목록 출력 -->
  	<select id="selectSupportList" resultType="map">
  		SELECT
		support_num, 
	    support_content, 
	    support_tag, 
	    support_date,
	    email,   
  		project_code
  		FROM support 
  		WHERE project_code = #{project_code}
  		ORDER BY support_date DESC;
  	</select>
  	
<!--   	지지서명 등록  -->
	<insert id="insertSupportSignature">
		<selectKey keyProperty="support_num" resultType="int" order="BEFORE">
		    SELECT IFNULL(MAX(support_num), 0)
		    FROM support
		</selectKey>
	 	INSERT INTO support(
	 		support_num,
	 		project_code,
	 		email,
	 		support_content,
	 		support_tag,
	 		support_date
	 	)VALUES(
	 		#{support_num} + 1,
	 		#{project_code},
	 		#{email},
	 		#{supportContent},
	 		#{supportKeyword},
	 		NOW()
	 	)
	</insert>
	
<!-- 	지지서명 댓글 등록 -->
	<insert id="insertSupportReply">
		<selectKey  keyProperty="reply_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(reply_num),0)
			FROM reply
		</selectKey>
		INSERT INTO reply
		VALUES(
				#{reply_num} + 1,
			    #{project_code},              
			    #{maker_email} ,         
			    #{reply_content}, 
			    NOW() , 
			    #{support_num},
			    #{reply_writer_ip},    
			    0 
		)
	</insert>
	
<!-- 	지지서명 댓글 목록 출력 -->
	<select id="selectReplyList" resultType="map">
		SELECT *
		FROM reply
		WHERE project_code = #{project_code}
	</select>
	
<!-- 	지지서명 댓글 삭제 -->
	<delete id="updateSupportReply">
		UPDATE reply
		SET reply_delete_status = 1
		WHERE reply_num = #{reply_num}
		AND project_code = #{project_code}
	</delete>
	
<!-- 	지지서명 댓글 작성자 출력 -->
<!-- 어짜피 댓글 작성자는 프로젝트코드 판매자 한명이라서 프로젝트 코드로 조건 걸었음 -->
	<select id="selectReplyWriter" resultType="map">
		SELECT reply_writer
		FROM reply
		WHERE project_code = #{project_code}
	</select>
  
<!--   펀딩 내역 테이블 가져오기 -->
	<select id="selectFundHistory" resultType="map">
		SELECT *
		FROM fund_history
		WHERE project_code = #{project_code}
		ORDER BY purchase_date DESC
	</select>
  
<!--   오른쪽 부분  -->
<!-- 	리워드 정보 가져오기 -->
	<select id="selectPaymentReward" resultType="map">
		SELECT *
		FROM reward
		WHERE project_code = #{project_code}
		ORDER BY reward_code
	</select>
<!-- 	선택한 리워드 정보 가져오기 -->
	<select id="selectPaymentSelectedReward" parameterType="map" resultType="reward">
	    SELECT * 
	    FROM reward
	    WHERE project_code = #{project_code}
	    AND reward_code = #{reward_code}
	    ORDER BY reward_code
	</select>

<!--   배송을 위한 맴버 정보 가져오기 -->
  	<select id="selectPaymentPayMember">
  		SELECT *
  		FROM member
  		WHERE email = #{email}
  	</select>
<!--   배송비 출력을 위한 projectinfo 테이블 가져오기 -->
	<select id="selectProjectInfo" resultType="map">
		SELECT *
		FROM project_info
		WHERE project_code = #{project_code}
	</select>
<!--   페이로 결제한 내역 계산  -->
	<insert id="insertPaymentPay">
		<selectKey keyProperty="pay_balance" order="BEFORE" resultType="int">
			SELECT pay_balance
			from fundizzy_pay
			WHERE email = #{email}
			ORDER BY pay_date DESC
			limit 1	
		</selectKey>
		INSERT INTO fundizzy_pay(
			email
			,pay_amt
			,pay_type
			,pay_date
			,pay_tran_id
			,pay_balance
		)VALUES(
			#{email}
			,#{payment_price}
			,'PA'
			,NOW()
			,#{pay_tran_id}
			, #{pay_balance} - #{payment_price}
		) 
	</insert>
  
  	<!--   	결제내역 payment 테이블 insert -->
	<insert id="insertPayment">
		<selectKey keyProperty="idx" order="BEFORE" resultType="int">
			SELECT IFNULL(MAX(idx),0)
			FROM payment
		</selectKey>
		INSERT INTO payment(
			idx
			, common_code
			, payment_code
			, project_code
			, billing_email
			, payment_method
			, payment_amount
			, payment_request_date
			, payment_complete_date
			, participation_status
			, pay_tran_id
		) VALUES (
			#{idx} + 1 
			, #{common_code}
			, CONCAT(#{common_code}, #{idx} + 1)
			, #{project_code}
			, #{email}
			, '계좌결제'
			, #{payment_price}
			, NOW()
			, NOW()
			, "PAR02"
			, #{pay_tran_id}
		)
	</insert>
	<!-- 	배송내역 insert -->
	<insert id="insertShipment">
		<selectKey keyProperty="idx" order="BEFORE" resultType="int">
			SELECT IFNULL(MAX(idx),0)
			FROM shipment
		</selectKey>
		INSERT INTO shipment(
			idx
			,common_code
			,project_code
			,payment_code
			,supporter_email
			,name
			,phone_num
			,address
			,address1
			,post_code
			,delivery_req
			,extra_address
		)VALUES (
			#{idx} + 1
			,"SHI01"
			,#{project_code}
			,(SELECT payment_code
				FROM payment
				WHERE pay_tran_id = #{pay_tran_id})
			,#{email}
			,#{name}
			,#{phone_num}
			,#{address1}
			,#{address2}
			,#{post_code}
			,#{delivery_req}
			,#{extra_address}
		)
	</insert>
	
<!--   	펀딩내역 insert -->
	<insert id="insertFundHistory">
    INSERT INTO fund_history (
        project_code, 
        member_email, 
        project_title, 
        representative_picture, 
        product_name,
        business_name, 
        result_point, 
        refund_stat, 
        reward_code, 
        purchase_date, 
        product_count, 
        payment_code
    ) 
    VALUES 
    <foreach collection="sendList" item="reward" separator=",">
        (
            #{reward.project_code},
            #{reward.email},
            (SELECT project_title FROM project_list WHERE project_code = #{reward.project_code}),
            (SELECT representative_picture FROM project_list WHERE project_code = #{reward.project_code}),
            (SELECT product_name FROM reward WHERE project_code = #{reward.project_code} AND reward_code = #{reward.reward_code}),
            (SELECT business_name FROM project_info WHERE project_code = #{reward.project_code}),
            (SELECT price FROM reward WHERE project_code = #{reward.project_code} AND reward_code = #{reward.reward_code}) * #{reward.product_count},
            'N',
            #{reward.reward_code},
            NOW(),
            #{reward.product_count},
            (SELECT payment_code FROM payment WHERE pay_tran_id = #{reward.pay_tran_id})
        )
    </foreach>
</insert>

	<select id="selectResultList" resultType="map">
		SELECT *
		FROM fund_history f
		JOIN project_info p ON f.project_code = p.project_code
		JOIN reward r ON  f.reward_code = r.reward_code
		WHERE payment_code = (
						SELECT payment_code
						FROM payment
						WHERE pay_tran_id = #{pay_tran_id}
					);
	</select>
	
	
	<!-- 프로젝트 달성률 조회 -->
	<select id="selectProgress" resultType="int">
		SELECT FLOOR((SELECT SUM(result_point)
						FROM fund_history
						WHERE project_code = #{project_code})
					/ (SELECT  target_amount
						from project_info
						WHERE project_code = #{project_code})
					* 100) as progress
		FROM DUAL
	</select>
	
  </mapper>