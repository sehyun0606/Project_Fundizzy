<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- DispatcherServlet 에서 관리할 스프링 빈이 포함된 패키지 탐색하기 위해 해당 패키지 지정 -->
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board" /> -->
	<!-- controller 패키지 내의 클래스들이 DispatcherServlet 에서 관리될 스프링 빈으로 등록됨 -->
	<context:component-scan base-package="com.itwillbs.project_fundizzy.controller" />
	<!-- 주의! controller 패키지만 명시했으므로 나머지 패키지의 클래스들은 스프링 빈으로 등록되지 못함! -->
	<!-- 웹과 관련없는 Service 등의 패키지는 root-context.xml 에서 관리하도록 추가로 등록 필요함 -->
	<!-- =========================================================================== -->
	<!-- servlet-context.xml 과 연결된 스프링 빈에서도 properties 파일 속성 접근하려면 -->
	<!-- root-context.xml 파일과 별개로 servlet-context.xml 파일에도 설정 추가 필요 -->
	<context:property-placeholder location="classpath:/config/application.properties" />
	
	<context:component-scan base-package="com.itwillbs.project_fundizzy.handler" />
	
	
	<!-- 오토 프록시(Auto-Proxy) 기능을 통해 객체 생성을 하기 위한 설정 -->
	<!-- 
	root-context.xml 에서 context:component-scan 태그에 service, handler, aop 패키지만 지정되어 있으므로
	해당 패키지의 클래스들만 오토 프록시 기능이 활성화 된다!
	따라서, 컨트롤러에서 AOP 기능을 활용하려면 컨트롤러를 관리하는 servlet-context.xml 파일에서
	해당 컨트롤러의 패키지를 context:component-scan 태그로 등록하고
	aop:aspectj-autoproxy 태그를 추가하여 오토프록시 활성화 필수!
	-->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- =========================================================================== -->
	<!-- 
	파일 업로드 처리를 위해 form 태그에 enctype="multipart/form-data" 속성을 추가했을 경우
	스프링 컨트롤러에서 폼 파라미터 데이터 처리를 위해(또는 MultipartFile 타입 객체 처리 위해)
	org.springframework.web.multipart.commons.CommonsMultipartResolver 객체 설정 필수!
	(꼭 MultipartFile 타입 객체를 사용하지 않더라도 request 객체를 통한 파라미터 처리가 가능해짐)
	=> bean 태그(현재 servlet-context.xml 파일에서는 <beans:bean> 태그) 사용하여 객체 설정
	=> id 속성값은 "muiltipartResolver" 고정
	=> class 속성값은 해당 라이브러리의 클래스 지정
	=> <beans:bean> 태그 사이에 <beans:property> 태그를 통해 파일 업로드 옵션(사이즈, 인코딩) 설정
	   이 때, name 속성값은 고정된 값 사용
	-->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- maxUploadSize 속성 : 파일 업로드 시 최대 파일 사이즈 지정(Byte 단위) => 10MB 로 제한 설정 -->
		<beans:property name="maxUploadSize" value="10485760"></beans:property>
		<!-- defaultEncoding 속성 : 파일명에 한글 등의 아스키코드 외의 문자 인코딩 방식 설정(UTF-8) -->
		<beans:property name="defaultEncoding" value="UTF-8"></beans:property>
	</beans:bean>
	
	<!-- ================================================================================ -->
	<!-- HandlerInterceptor 를 활용한 세션 가로채기 설정 -->
	<!-- 1) 실질적인 가로채기 기능을 수행할 인터셉터 클래스를 스프링 빈으로 지정(id 속성값은 아무거나) -->
<!-- 	<beans:bean id="loginInterceptor" class="com.itwillbs.project_fundizzy.handler.LoginInterceptor" /> -->
	
	<!-- 2) 클라이언트 요청에 대한 인터셉터 연결(주소 매핑을 통해 인터셉터 객체 연결) -->
<!-- 	<interceptors> -->
<!-- 		<interceptor> -->
			<!-- 2-1) 세션 가로채기가 필요한 요청 주소를 <mapping> 태그의 path 속성으로 지정 -->
			<!-- 특정 주소를 각각 지정할 경우 -->
<!-- 			<mapping path="/BoardDelete"/> -->
			
<!-- 			<mapping path="/BankMain"/> -->
<!-- 			<mapping path="/BankUserInfo"/> -->
			<!-- 반복되는 패턴은 * 활용 가능 -->
<!-- 			<mapping path="/Bank*"/> -->

			<!-- 불특정 다수의 대상(대부분의 주소)을 가로채기 대상으로 지정할 경우 -->
			<!-- 매핑 경로를 "/*" 형태로 지정하고 제외할 대상을 <exclude-mapping> 태그로 지정 -->
<!-- 			<mapping path="/*"/> -->
<!-- 			<exclude-mapping path="/"/> 메인페이지(루트) -->
<!-- 			<exclude-mapping path="/MemberJoin"/> 회원가입 -->
<!-- 			<exclude-mapping path="/MemberLogin"/> 로그인 -->
<!-- 			<exclude-mapping path="/BoardList"/> 글 목록 -->
<!-- 			<exclude-mapping path="/BoardDetail"/> 글 상세보기 -->
			<!-- 위의 네 가지 경로를 제외한 나머지는 모두 세션 인터셉터에 의해 로그인 체크 수행됨 -->
			
			
			<!-- 2-2) 요청에 대한 인터셉터 지정(1번 과정에서 지정한 id 값 활용) -->
<!-- 			<beans:ref bean="loginInterceptor"/> -->
<!-- 		</interceptor> -->
<!-- 	</interceptors> -->
	
</beans:beans>
















