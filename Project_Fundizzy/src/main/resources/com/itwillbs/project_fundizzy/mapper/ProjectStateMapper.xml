<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.project_fundizzy.mapper.ProjectStateMapper">
	<!-- ======================= 새소식 ======================= -->
	<insert id="insertNewsBoard">
		<selectKey keyProperty="news_code" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(news_code), 0)
			FROM news
		</selectKey>
		INSERT 
		INTO news
		VALUES (
			#{news_code} + 1
			, #{project_code}
			, #{maker_email}
			, #{news_title}
			, #{news_content}
			, NOW()
			, 'Y'
		)
	</insert>
	
	<select id="selectNewsList" resultType="news">
		SELECT *
		FROM news
		WHERE 
			project_code = #{project_code}
			AND news_status = 'Y'
		ORDER BY news_date DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<select id="selectNewsListCount" resultType="int">
		SELECT COUNT(*)
		FROM news
		WHERE 
			project_code = #{project_code}
			AND news_status = 'Y'
	</select>
	
	<select id="getNews" resultType="news">
		SELECT *
		FROM news
		WHERE news_code = #{news_code}
	</select>
	
	<update id="deleteNews">
		UPDATE news
		SET news_status = 'D'
		WHERE news_code = #{news_code}
	</update>

	<update id="updateNewsBoard">
		UPDATE news
		SET news_title = #{news_title}
			, news_content = #{news_content}
		WHERE news_code = #{news_code}
	</update>

	<!-- ======================= 프로젝트 현황 ======================= -->
	<select id="selectTotalPaymentAmount" resultType="int">
		SELECT ifnull(SUM(payment_amount),0)
		FROM payment
		WHERE project_code = #{project_code}
	</select>

	<select id="selectPaymentCountList" resultType="map">
		SELECT
		    DATE(payment_complete_date) AS date,
		    COUNT(*) AS daily_payments,  -- 해당 날짜의 결제 건수
		    SUM(COUNT(*)) OVER (ORDER BY DATE(payment_complete_date)) AS cumulative_payments -- 누적 건수
		FROM payment
		WHERE project_code = #{project_code}
		GROUP BY DATE(payment_complete_date)
		ORDER BY DATE(payment_complete_date)
	</select>
	
	<select id="selectDailyPaymentList" resultType="map">
		SELECT 
		    DATE(payment_complete_date) AS date,
		    SUM(payment_amount) AS cumulative_payments
		FROM payment
		WHERE project_code = #{project_code}
		GROUP BY DATE(payment_complete_date)
		ORDER BY DATE(payment_complete_date);
	</select>
	
	<select id="selectCumulativePaymentList" resultType="map">
		SELECT 
		    DATE(payment_complete_date) AS date,
		    SUM(SUM(payment_amount)) OVER (ORDER BY DATE(payment_complete_date)) AS cumulative_payments
		FROM payment
		WHERE project_code = #{project_code}
		GROUP BY DATE(payment_complete_date)
		ORDER BY DATE(payment_complete_date)
	</select>
	
	<!-- ======================= 발송 환불 관리 ======================= -->
	<select id="selectOrderCount" resultType="int">
		SELECT COUNT(*)
		FROM shipment
		WHERE project_code = #{project_code}
	</select>
	
	<!-- 결제내역, 환불상태 조회 -->
	<select id="selectOrderList" resultType="map">
		SELECT 
		    p.common_code AS payment_common_code, 
		    p.project_code, 
		    p.payment_code,
		    p.billing_email, 
		    p.payment_method, 
		    FORMAT(p.payment_amount, 0) AS payment_amount,
		    p.payment_request_date, 
		    p.payment_complete_date,
		    p.participation_status, 
		    p.reference_number, 
		    s.common_code AS shipment_common_code, 
		    s.shipping_code, 
		    s.supporter_email, 
		    s.name, 
		    CONCAT(SUBSTRING(s.phone_num, 1, 3), '-', SUBSTRING(s.phone_num, 4, 4), '-', SUBSTRING(s.phone_num, 8)) AS phone_num, 
		    s.address, 
		    s.address1, 
		    s.post_code,
		    s.courier,
		    s.tracking_num,
		    (SELECT COUNT(*) 
		     FROM fund_history fh 
		     WHERE fh.payment_code = p.payment_code) AS fund_count,
		    (SELECT ( CASE 
				WHEN SUM(status) = 0 then ''
				WHEN SUM(status) != 0 AND MOD(SUM(status), 10) != 0 then "신청"
				WHEN SUM(status) != 0 AND MOD(SUM(status), 10) = 0 then "완료"
				END
				) as refund_status
				 FROM (SELECT CASE 
							WHEN refund_status is null THEN 0
							WHEN refund_status = 'REF01' THEN 1
							WHEN refund_status = 'REF02' THEN 10
							ELSE 100
							END as status
						FROM refund
						WHERE payment_code = p.payment_code
					) as refund_status_table) as refund_status
		FROM 
			payment p
		JOIN 
			shipment s
		ON 
			p.payment_code = s.payment_code
		WHERE 
			p.project_code = #{project_code}
		ORDER BY 
			p.payment_complete_date DESC
		
	</select>
	
	<!-- 구매한 리워드 정보 조회 -->
	<select id="selectPaymentRewardList" resultType="map">
		SELECT 
			fh.fund_idx, 
			fh.project_code, 
			fh.member_email, 
			fh.project_title, 
			fh.representative_picture, 
			fh.product_name, 
			fh.business_name, 
			FORMAT(fh.result_point, 0) AS result_point,
			fh.send_stat, 
			fh.refund_stat, 
			fh.reward_code, 
			fh.purchase_date, 
			fh.refund_date, 
			fh.send_date, 
			fh.product_count, 
			fh.payment_code,
			(SELECT refund_reason
			 FROM refund r
		     WHERE r.fund_idx = fh.fund_idx) as refund_reason,
		    (SELECT refund_code
			 FROM refund r
		     WHERE r.fund_idx = fh.fund_idx) as refund_code,
		    (SELECT DISTINCT nickname
			 FROM refund r
			 JOIN member m
			 ON r.member_email = m.email
			 WHERE payment_code = #{payment_code}) as nickname
		FROM 
			fund_history fh
		WHERE 
			fh.payment_code = #{payment_code}
	</select>
	
	<select id="selectShipStateCount" resultType="map">
		SELECT common_code, COUNT(*) AS count
		FROM shipment
		WHERE project_code = #{project_code}
		GROUP BY common_code
		ORDER BY common_code
	</select>
	
	<select id="selectRefundStateCount" resultType="map">
		SELECT refund_stat, COUNT(*) AS count
		FROM fund_history
		WHERE project_code = #{project_code}
		GROUP BY refund_stat
		ORDER BY refund_stat
	</select>
	
	<!-- 환불 정보 조회 -->
	<select id="selectRefund" resultType="refund">
		SELECT *
		FROM refund
		WHERE project_code = #{project_code}
	</select>
	
	<!-- fund_history 테이블 - 환불 상태 업데이트 -->
	<update id="updateRefundFundHistoryStatus">
		UPDATE fund_history fh
		JOIN refund r
		ON fh.fund_idx = r.fund_idx
		SET 
			<choose>
				<when test="reject_reason == null">
					refund_stat = 'REF02'
				</when>
				<otherwise>
					refund_stat = 'REF03'
				</otherwise>
			</choose>
			, refund_date = NOW()
		WHERE refund_code = #{refund_code}
	</update>
	
	<!-- refund 테이블 - 환불 상태, 날짜, 거절 사유 업데이트 -->
	<update id="updateRefundStatus">
		UPDATE refund
		SET 
			<choose>
				<when test="reject_reason == null">
					refund_status = 'REF02'
				</when>
				<otherwise>
					refund_status = 'REF03',
					reject_reason = #{reject_reason}
				</otherwise>
			</choose>
			, refund_confirm_date = NOW()
		WHERE refund_code = #{refund_code}
	</update>
	
	<!-- 환불 금액 입금 -->
	<insert id="insertRefundPay">
		<selectKey order="BEFORE" keyProperty="pay_balance" resultType="int">
			SELECT pay_balance
			FROM fundizzy_pay
			WHERE email = #{email}
			AND pay_date = (SELECT MAX(pay_date)
							FROM fundizzy_pay
							WHERE email = #{email})
		</selectKey>
		INSERT
		INTO fundizzy_pay
		VALUES (
			#{email}
			, #{pay_amt}
			, 'RE'
			, NOW()
			, #{pay_tran_id}
			, #{pay_balance} + #{pay_amt}
		)
	</insert>
	
	<!-- 발송 정보 업데이트 -->
	<update id="updateShipmentStatus">
		UPDATE shipment
		SET shipping_code = #{shipping_code}
			, common_code = 'SHI03'
			, courier = #{courier}
			, tracking_num = #{tracking_num}
			, shipping_date = NOW()
		WHERE payment_code = #{payment_code}		
	</update>
	
	<update id="updateShipFundHistoryStatus">
		UPDATE fund_history
		SET send_stat = 'SHI03'
			, send_date = NOW()
		WHERE payment_code = #{payment_code}
	</update>
	
	<!-- 발송정보 입력 취소 -->
	<update id="deleteShipmentStatus">
		UPDATE shipment
		SET shipping_code = null
			, common_code = 'SHI01'
			, courier = null
			, tracking_num = null
			, shipping_date = null
		WHERE payment_code = #{payment_code}		
	</update>
	
	<update id="deleteShipFundHistoryStatus">
		UPDATE fund_history
		SET send_stat = 'SHI01'
			, send_date = null
		WHERE payment_code = #{payment_code}
	</update>
	
	<select id="selectProjectInfoJoinStory" resultType="map">
		SELECT i.*, s.*, l.*
		FROM project_info i
		JOIN project_story s
		ON i.project_code = s.project_code
		JOIN project_list l
		ON i.project_code = l.project_code
		WHERE i.project_code = #{project_code}
	</select>
	
	<select id="selectSettlementFee" resultType="int">
		SELECT FLOOR(SUM(payment_amount) * (SELECT CASE 
														WHEN service_type = 'pro' THEN 0.1
														WHEN service_type = 'basic' THEN 0.05
												   END as type
											FROM project_list
											WHERE project_code = #{project_code})) as fee
		FROM payment
		WHERE project_code = #{project_code}
	</select>
	
	<select id="selectPreSettlementAmount" resultType="int">
		SELECT FLOOR(SUM(payment_amount) * 0.6) as pre_amount
		FROM payment
		WHERE project_code = #{project_code}
	</select>
	
	<select id="selectRefundAmount" resultType="int">
		SELECT SUM(refund_amound) as refund_amount
		FROM refund
		WHERE project_code = #{project_code}
	</select>
	
	<!-- 선정산 정보 등록 및 상태 업데이트 -->
	<insert id="insertPreSettlement">
		INSERT 
		INTO settlement
		VALUES (
			null
			, #{settlement_code}
			, #{project_code}
			, #{member_email}
			, #{total_amount}
			, null
			, 'SET03'	-- 선정산 신청됨
			, #{pre_amount}
			, NOW()
			, null
			, null
			, null
			, null
			, #{fee}
		)
	</insert>
	
	<update id="updateProjectListSettlementStatus">
		UPDATE project_list
		SET settlement_status = 'SET03'
		WHERE project_code = #{project_code}
	</update>
	
	<select id="selectPreSettlementInfo" resultType="map">
		SELECT s.*, l.*, i.*
		FROM settlement s
		JOIN project_list l
		ON s.project_code = l.project_code
		JOIN project_info i
		ON s.project_code = i.project_code
		WHERE s.project_code = #{project_code}
	</select>
	
	<!-- 최종정산 -->
	<update id="updateFinalSettlement">
		UPDATE settlement
		SET settlement_status = 'SET06'
			, final_amount = #{final_amount}
			, final_request_date = NOW()
			, refund_amount = #{refund_amount}
		WHERE project_code = #{project_code}
	</update>
	
	<update id="updateProjectListFinalSettlementStatus">
		UPDATE project_list
		SET settlement_status = 'SET06'
		WHERE project_code = #{project_code}
	</update>
	
	<select id="selectProjectRemainDate" resultType="int">
		SELECT DATEDIFF(project_end_date, CURDATE()) as remainDate
		FROM project_date
		WHERE project_code = #{project_code}
	</select>

	<select id="selectSupportCount" resultType="int">
		SELECT COUNT(*)
		FROM support
		WHERE project_code = #{project_code}
	</select>
	

</mapper>













